#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('express-mariana-integrations-demo:server');
const fs = require('fs');
const http = require('http');
const https = require('https');
const path = require('path');

const environment = process.env.NODE_ENV;
const isDev = (process.env.NODE_ENV || app.get('env')) === 'development';

if (isDev) {
    // eslint-disable-next-line global-require
    require('dotenv').config({
        path: path.resolve('./', '.env')
    });
}

const marianaApiHost = process.env.MARIANA_API_HOST || '';
const isHostHttp = marianaApiHost.includes('http://');

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '8080');

app.set('port', port);

/**
 * Create HTTP server.
 */

function configureServer() {
    /**
     * Check if this is production (heroku), if so, return an HTTP server.
     * If not, check if there is an MARIANA_API_HOST envronment variable locally, and if so,
     * check if that host is http, vs. https.
     */
    if (environment === 'production' || (marianaApiHost && isHostHttp)) {
        return http.createServer(app);
    }

    const httpsOptions = {
        key: fs.readFileSync( './localhost.key' ) || null,
        cert: fs.readFileSync( './localhost.cert' ) || null,
        requestCert: false,
        rejectUnauthorized: false
    };

    return https.createServer(httpsOptions, app);
}

const server = configureServer();

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? `Pipe ${port}`
        : `Port ${port}`;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(`${bind} requires elevated privileges`);
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(`${bind} is already in use`);
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? `pipe ${addr}`
        : `port ${addr.port}`;

    debug(`Listening on ${bind}`);
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
