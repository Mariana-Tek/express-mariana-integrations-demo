#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('express-mariana-integrations-demo:server');
const fs = require('fs');
const http = require('http');
const https = require('https');

const environment = process.env.NODE_ENV;
const apiHost = process.env.MARIANA_API_HOST;

/**
 * Get port from environment and store in Express.
 */
const normalizePort = require('../helpers/normalize-port');

const port = normalizePort(process.env.PORT || '8080');

app.set('port', port);

/**
 * Create HTTP server.
 */

const httpsOptions = {
    key: (environment === 'production') ? null : fs.readFileSync( './localhost.key' ),
    cert: (environment === 'production') ? null : fs.readFileSync( './localhost.cert' ),
    requestCert: false,
    rejectUnauthorized: false
};

const server = (environment === 'production') || apiHost.includes('http://')
    ? http.createServer(app)
    : https.createServer(httpsOptions, app);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? `Pipe ${port}`
        : `Port ${port}`;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(`${bind} requires elevated privileges`);
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(`${bind} is already in use`);
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? `pipe ${addr}`
        : `port ${addr.port}`;

    debug(`Listening on ${bind}`);
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
